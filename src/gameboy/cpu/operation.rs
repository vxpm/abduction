use super::{ByteRegister, CpuFlag, WordRegister};
use std::hint::unreachable_unchecked;

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum Operation {
    Noop,
    LoadImmediateIntoWordReg(WordRegister),
    LoadRegIntoAddressInWordReg(ByteRegister, WordRegister),
    IncrementWordReg(WordRegister),
    IncrementReg(ByteRegister),
    DecrementReg(ByteRegister),
    LoadImmediateIntoReg(ByteRegister),
    RotateAccLeft,
    LoadSPIntoImmediateAddress,
    AddWordRegIntoWordReg(WordRegister, WordRegister),
    LoadAtAddressInWordRegIntoReg(WordRegister, ByteRegister),
    DecrementWordReg(WordRegister),
    RotateAccRight,
    Stop,
    RotateAccLeftThroughCarry,
    RelativeJumpImmediateOffset,
    RotateAccRightThroughCarry,
    ConditionalRelativeJumpImmediateOffset(CpuFlag),
    NegativeConditionalRelativeJumpImmediateOffset(CpuFlag),
    LoadRegIntoAddressInWordRegAndIncrementWordReg(ByteRegister, WordRegister),
    DecimalAdjustAcc,
    LoadAtAddressInWordRegIntoRegAndIncrementWordReg(WordRegister, ByteRegister),
    ComplementAcc,
    LoadRegIntoAddressInWordRegAndDecrementWordReg(ByteRegister, WordRegister),
    IncrementAtAddressInWordReg(WordRegister),
    DecrementAtAddressInWordReg(WordRegister),
    LoadImmediateIntoAddressInWordReg(WordRegister),
    SetCarry,
    LoadAtAddressInWordRegIntoRegAndDecrementWordReg(WordRegister, ByteRegister),
    ComplementCarry,
    LoadRegIntoReg(ByteRegister, ByteRegister),
    Halt,
    AddRegIntoReg(ByteRegister, ByteRegister),
    AddAtAddressInWordRegIntoReg(WordRegister, ByteRegister),
    AddRegIntoRegWithCarry(ByteRegister, ByteRegister),
    AddAtAddressInWordRegIntoRegWithCarry(WordRegister, ByteRegister),
    SubRegFromReg(ByteRegister, ByteRegister),
    SubAtAddressInWordRegFromReg(WordRegister, ByteRegister),
    SubRegFromRegWithCarry(ByteRegister, ByteRegister),
    SubAtAddressInWordRegFromRegWithCarry(WordRegister, ByteRegister),
    AndRegIntoReg(ByteRegister, ByteRegister),
    AndAtAddressInWordRegIntoReg(WordRegister, ByteRegister),
    XorRegIntoReg(ByteRegister, ByteRegister),
    XorAtAddressInWordRegIntoReg(WordRegister, ByteRegister),
    OrRegIntoReg(ByteRegister, ByteRegister),
    OrAtAddressInWordRegIntoReg(WordRegister, ByteRegister),
    CompareRegAndReg(ByteRegister, ByteRegister),
    CompareAtAddressInWordRegAndReg(WordRegister, ByteRegister),
    ConditionalReturn(CpuFlag),
    NegativeConditionalReturn(CpuFlag),
    PopStackIntoWordReg(WordRegister),
    ConditionalJumpImmediateAddress(CpuFlag),
    NegativeConditionalJumpImmediateAddress(CpuFlag),
    JumpImmediateAddress,
    ConditionalCallImmediateAddress(CpuFlag),
    NegativeConditionalCallImmediateAddress(CpuFlag),
    PushWordRegIntoStack(WordRegister),
    AddImmediateIntoReg(ByteRegister),
    CallFixedAddress(u16),
    Return,
    Prefixed,
    CallImmediateAddress,
    AddImmediateIntoRegWithCarry(ByteRegister),
    SubImmediateFromReg(ByteRegister),
    ReturnAndEnableInterrupts,
    SubImmediateFromRegWithCarry(ByteRegister),
    LoadRegIntoImmediateIORegister(ByteRegister),
    LoadRegIntoRegIORegister(ByteRegister, ByteRegister),
    AndImmediateIntoReg(ByteRegister),
    AddSignedImmediateIntoWordReg(WordRegister),
    JumpToAddressInWordReg(WordRegister),
    LoadRegIntoImmediateAddress(ByteRegister),
    XorImmediateIntoReg(ByteRegister),
    LoadImmediateIORegisterIntoReg(ByteRegister),
    LoadRegIORegisterIntoReg(ByteRegister, ByteRegister),
    DisableInterrupts,
    OrImmediateIntoReg(ByteRegister),
    LoadSumOfWordRegAndSignedImmediateIntoWordReg(WordRegister, WordRegister),
    LoadWordRegIntoWordReg(WordRegister, WordRegister),
    LoadAtImmediateAddressIntoReg(ByteRegister),
    EnableInterrupts,
    CompareImmediateAndReg(ByteRegister),
}

impl From<u8> for Operation {
    fn from(value: u8) -> Self {
        match value {
            // Row 0
            0x00 => Self::Noop,
            0x01 => Self::LoadImmediateIntoWordReg(WordRegister::BC),
            0x02 => Self::LoadRegIntoAddressInWordReg(ByteRegister::A, WordRegister::BC),
            0x03 => Self::IncrementWordReg(WordRegister::BC),
            0x04 => Self::IncrementReg(ByteRegister::B),
            0x05 => Self::DecrementReg(ByteRegister::B),
            0x06 => Self::LoadImmediateIntoReg(ByteRegister::B),
            0x07 => Self::RotateAccLeft, // r a left
            0x08 => Self::LoadSPIntoImmediateAddress,
            0x09 => Self::AddWordRegIntoWordReg(WordRegister::BC, WordRegister::HL),
            0x0A => Self::LoadAtAddressInWordRegIntoReg(WordRegister::BC, ByteRegister::A),
            0x0B => Self::DecrementWordReg(WordRegister::BC),
            0x0C => Self::IncrementReg(ByteRegister::C),
            0x0D => Self::DecrementReg(ByteRegister::C),
            0x0E => Self::LoadImmediateIntoReg(ByteRegister::C),
            0x0F => Self::RotateAccRight, // r a right
            // Row 1
            0x10 => Self::Stop,
            0x11 => Self::LoadImmediateIntoWordReg(WordRegister::DE),
            0x12 => Self::LoadRegIntoAddressInWordReg(ByteRegister::A, WordRegister::DE),
            0x13 => Self::IncrementWordReg(WordRegister::DE),
            0x14 => Self::IncrementReg(ByteRegister::D),
            0x15 => Self::DecrementReg(ByteRegister::D),
            0x16 => Self::LoadImmediateIntoReg(ByteRegister::D),
            0x17 => Self::RotateAccLeftThroughCarry, // r a left
            0x18 => Self::RelativeJumpImmediateOffset,
            0x19 => Self::AddWordRegIntoWordReg(WordRegister::DE, WordRegister::HL),
            0x1A => Self::LoadAtAddressInWordRegIntoReg(WordRegister::DE, ByteRegister::A),
            0x1B => Self::DecrementWordReg(WordRegister::DE),
            0x1C => Self::IncrementReg(ByteRegister::E),
            0x1D => Self::DecrementReg(ByteRegister::E),
            0x1E => Self::LoadImmediateIntoReg(ByteRegister::E),
            0x1F => Self::RotateAccRightThroughCarry, // r a right
            // Row 2
            0x20 => Self::NegativeConditionalRelativeJumpImmediateOffset(CpuFlag::Zero),
            0x21 => Self::LoadImmediateIntoWordReg(WordRegister::HL),
            0x22 => Self::LoadRegIntoAddressInWordRegAndIncrementWordReg(
                ByteRegister::A,
                WordRegister::HL,
            ),
            0x23 => Self::IncrementWordReg(WordRegister::HL),
            0x24 => Self::IncrementReg(ByteRegister::H),
            0x25 => Self::DecrementReg(ByteRegister::H),
            0x26 => Self::LoadImmediateIntoReg(ByteRegister::H),
            0x27 => Self::DecimalAdjustAcc,
            0x28 => Self::ConditionalRelativeJumpImmediateOffset(CpuFlag::Zero),
            0x29 => Self::AddWordRegIntoWordReg(WordRegister::HL, WordRegister::HL),
            0x2A => Self::LoadAtAddressInWordRegIntoRegAndIncrementWordReg(
                WordRegister::HL,
                ByteRegister::A,
            ),
            0x2B => Self::DecrementWordReg(WordRegister::HL),
            0x2C => Self::IncrementReg(ByteRegister::L),
            0x2D => Self::DecrementReg(ByteRegister::L),
            0x2E => Self::LoadImmediateIntoReg(ByteRegister::L),
            0x2F => Self::ComplementAcc,
            // Row 3
            0x30 => Self::NegativeConditionalRelativeJumpImmediateOffset(CpuFlag::Carry),
            0x31 => Self::LoadImmediateIntoWordReg(WordRegister::SP),
            0x32 => Self::LoadRegIntoAddressInWordRegAndDecrementWordReg(
                ByteRegister::A,
                WordRegister::HL,
            ),
            0x33 => Self::IncrementWordReg(WordRegister::SP),
            0x34 => Self::IncrementAtAddressInWordReg(WordRegister::HL),
            0x35 => Self::DecrementAtAddressInWordReg(WordRegister::HL),
            0x36 => Self::LoadImmediateIntoAddressInWordReg(WordRegister::HL),
            0x37 => Self::SetCarry,
            0x38 => Self::ConditionalRelativeJumpImmediateOffset(CpuFlag::Carry),
            0x39 => Self::AddWordRegIntoWordReg(WordRegister::SP, WordRegister::HL),
            0x3A => Self::LoadAtAddressInWordRegIntoRegAndDecrementWordReg(
                WordRegister::HL,
                ByteRegister::A,
            ),
            0x3B => Self::DecrementWordReg(WordRegister::SP),
            0x3C => Self::IncrementReg(ByteRegister::A),
            0x3D => Self::DecrementReg(ByteRegister::A),
            0x3E => Self::LoadImmediateIntoReg(ByteRegister::A),
            0x3F => Self::ComplementCarry,
            // Row 4
            // B
            0x40 => Self::LoadRegIntoReg(ByteRegister::B, ByteRegister::B),
            0x41 => Self::LoadRegIntoReg(ByteRegister::C, ByteRegister::B),
            0x42 => Self::LoadRegIntoReg(ByteRegister::D, ByteRegister::B),
            0x43 => Self::LoadRegIntoReg(ByteRegister::E, ByteRegister::B),
            0x44 => Self::LoadRegIntoReg(ByteRegister::H, ByteRegister::B),
            0x45 => Self::LoadRegIntoReg(ByteRegister::L, ByteRegister::B),
            0x46 => Self::LoadAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::B),
            0x47 => Self::LoadRegIntoReg(ByteRegister::A, ByteRegister::B),
            // C
            0x48 => Self::LoadRegIntoReg(ByteRegister::B, ByteRegister::C),
            0x49 => Self::LoadRegIntoReg(ByteRegister::C, ByteRegister::C),
            0x4A => Self::LoadRegIntoReg(ByteRegister::D, ByteRegister::C),
            0x4B => Self::LoadRegIntoReg(ByteRegister::E, ByteRegister::C),
            0x4C => Self::LoadRegIntoReg(ByteRegister::H, ByteRegister::C),
            0x4D => Self::LoadRegIntoReg(ByteRegister::L, ByteRegister::C),
            0x4E => Self::LoadAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::C),
            0x4F => Self::LoadRegIntoReg(ByteRegister::A, ByteRegister::C),
            // Row 5
            // D
            0x50 => Self::LoadRegIntoReg(ByteRegister::B, ByteRegister::D),
            0x51 => Self::LoadRegIntoReg(ByteRegister::C, ByteRegister::D),
            0x52 => Self::LoadRegIntoReg(ByteRegister::D, ByteRegister::D),
            0x53 => Self::LoadRegIntoReg(ByteRegister::E, ByteRegister::D),
            0x54 => Self::LoadRegIntoReg(ByteRegister::H, ByteRegister::D),
            0x55 => Self::LoadRegIntoReg(ByteRegister::L, ByteRegister::D),
            0x56 => Self::LoadAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::D),
            0x57 => Self::LoadRegIntoReg(ByteRegister::A, ByteRegister::D),
            // E
            0x58 => Self::LoadRegIntoReg(ByteRegister::B, ByteRegister::E),
            0x59 => Self::LoadRegIntoReg(ByteRegister::C, ByteRegister::E),
            0x5A => Self::LoadRegIntoReg(ByteRegister::D, ByteRegister::E),
            0x5B => Self::LoadRegIntoReg(ByteRegister::E, ByteRegister::E),
            0x5C => Self::LoadRegIntoReg(ByteRegister::H, ByteRegister::E),
            0x5D => Self::LoadRegIntoReg(ByteRegister::L, ByteRegister::E),
            0x5E => Self::LoadAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::E),
            0x5F => Self::LoadRegIntoReg(ByteRegister::A, ByteRegister::E),
            // Row 6
            // H
            0x60 => Self::LoadRegIntoReg(ByteRegister::B, ByteRegister::H),
            0x61 => Self::LoadRegIntoReg(ByteRegister::C, ByteRegister::H),
            0x62 => Self::LoadRegIntoReg(ByteRegister::D, ByteRegister::H),
            0x63 => Self::LoadRegIntoReg(ByteRegister::E, ByteRegister::H),
            0x64 => Self::LoadRegIntoReg(ByteRegister::H, ByteRegister::H),
            0x65 => Self::LoadRegIntoReg(ByteRegister::L, ByteRegister::H),
            0x66 => Self::LoadAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::H),
            0x67 => Self::LoadRegIntoReg(ByteRegister::A, ByteRegister::H),
            // L
            0x68 => Self::LoadRegIntoReg(ByteRegister::B, ByteRegister::L),
            0x69 => Self::LoadRegIntoReg(ByteRegister::C, ByteRegister::L),
            0x6A => Self::LoadRegIntoReg(ByteRegister::D, ByteRegister::L),
            0x6B => Self::LoadRegIntoReg(ByteRegister::E, ByteRegister::L),
            0x6C => Self::LoadRegIntoReg(ByteRegister::H, ByteRegister::L),
            0x6D => Self::LoadRegIntoReg(ByteRegister::L, ByteRegister::L),
            0x6E => Self::LoadAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::L),
            0x6F => Self::LoadRegIntoReg(ByteRegister::A, ByteRegister::L),
            // Row 7
            // Address in HL
            0x70 => Self::LoadRegIntoAddressInWordReg(ByteRegister::B, WordRegister::HL),
            0x71 => Self::LoadRegIntoAddressInWordReg(ByteRegister::C, WordRegister::HL),
            0x72 => Self::LoadRegIntoAddressInWordReg(ByteRegister::D, WordRegister::HL),
            0x73 => Self::LoadRegIntoAddressInWordReg(ByteRegister::E, WordRegister::HL),
            0x74 => Self::LoadRegIntoAddressInWordReg(ByteRegister::H, WordRegister::HL),
            0x75 => Self::LoadRegIntoAddressInWordReg(ByteRegister::L, WordRegister::HL),
            0x76 => Self::Halt,
            0x77 => Self::LoadRegIntoAddressInWordReg(ByteRegister::A, WordRegister::HL),
            // A
            0x78 => Self::LoadRegIntoReg(ByteRegister::B, ByteRegister::A),
            0x79 => Self::LoadRegIntoReg(ByteRegister::C, ByteRegister::A),
            0x7A => Self::LoadRegIntoReg(ByteRegister::D, ByteRegister::A),
            0x7B => Self::LoadRegIntoReg(ByteRegister::E, ByteRegister::A),
            0x7C => Self::LoadRegIntoReg(ByteRegister::H, ByteRegister::A),
            0x7D => Self::LoadRegIntoReg(ByteRegister::L, ByteRegister::A),
            0x7E => Self::LoadAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::A),
            0x7F => Self::LoadRegIntoReg(ByteRegister::A, ByteRegister::A),
            // Row 8
            // Add
            0x80 => Self::AddRegIntoReg(ByteRegister::B, ByteRegister::A),
            0x81 => Self::AddRegIntoReg(ByteRegister::C, ByteRegister::A),
            0x82 => Self::AddRegIntoReg(ByteRegister::D, ByteRegister::A),
            0x83 => Self::AddRegIntoReg(ByteRegister::E, ByteRegister::A),
            0x84 => Self::AddRegIntoReg(ByteRegister::H, ByteRegister::A),
            0x85 => Self::AddRegIntoReg(ByteRegister::L, ByteRegister::A),
            0x86 => Self::AddAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::A),
            0x87 => Self::AddRegIntoReg(ByteRegister::A, ByteRegister::A),
            // Add with Carry
            0x88 => Self::AddRegIntoRegWithCarry(ByteRegister::B, ByteRegister::A),
            0x89 => Self::AddRegIntoRegWithCarry(ByteRegister::C, ByteRegister::A),
            0x8A => Self::AddRegIntoRegWithCarry(ByteRegister::D, ByteRegister::A),
            0x8B => Self::AddRegIntoRegWithCarry(ByteRegister::E, ByteRegister::A),
            0x8C => Self::AddRegIntoRegWithCarry(ByteRegister::H, ByteRegister::A),
            0x8D => Self::AddRegIntoRegWithCarry(ByteRegister::L, ByteRegister::A),
            0x8E => Self::AddAtAddressInWordRegIntoRegWithCarry(WordRegister::HL, ByteRegister::A),
            0x8F => Self::AddRegIntoRegWithCarry(ByteRegister::A, ByteRegister::A),
            // Row 9
            // Sub
            0x90 => Self::SubRegFromReg(ByteRegister::B, ByteRegister::A),
            0x91 => Self::SubRegFromReg(ByteRegister::C, ByteRegister::A),
            0x92 => Self::SubRegFromReg(ByteRegister::D, ByteRegister::A),
            0x93 => Self::SubRegFromReg(ByteRegister::E, ByteRegister::A),
            0x94 => Self::SubRegFromReg(ByteRegister::H, ByteRegister::A),
            0x95 => Self::SubRegFromReg(ByteRegister::L, ByteRegister::A),
            0x96 => Self::SubAtAddressInWordRegFromReg(WordRegister::HL, ByteRegister::A),
            0x97 => Self::SubRegFromReg(ByteRegister::A, ByteRegister::A),
            // Sub with Carry
            0x98 => Self::SubRegFromRegWithCarry(ByteRegister::B, ByteRegister::A),
            0x99 => Self::SubRegFromRegWithCarry(ByteRegister::C, ByteRegister::A),
            0x9A => Self::SubRegFromRegWithCarry(ByteRegister::D, ByteRegister::A),
            0x9B => Self::SubRegFromRegWithCarry(ByteRegister::E, ByteRegister::A),
            0x9C => Self::SubRegFromRegWithCarry(ByteRegister::H, ByteRegister::A),
            0x9D => Self::SubRegFromRegWithCarry(ByteRegister::L, ByteRegister::A),
            0x9E => Self::SubAtAddressInWordRegFromRegWithCarry(WordRegister::HL, ByteRegister::A),
            0x9F => Self::SubRegFromRegWithCarry(ByteRegister::A, ByteRegister::A),
            // Row A
            // And
            0xA0 => Self::AndRegIntoReg(ByteRegister::B, ByteRegister::A),
            0xA1 => Self::AndRegIntoReg(ByteRegister::C, ByteRegister::A),
            0xA2 => Self::AndRegIntoReg(ByteRegister::D, ByteRegister::A),
            0xA3 => Self::AndRegIntoReg(ByteRegister::E, ByteRegister::A),
            0xA4 => Self::AndRegIntoReg(ByteRegister::H, ByteRegister::A),
            0xA5 => Self::AndRegIntoReg(ByteRegister::L, ByteRegister::A),
            0xA6 => Self::AndAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::A),
            0xA7 => Self::AndRegIntoReg(ByteRegister::A, ByteRegister::A),
            // Xor
            0xA8 => Self::XorRegIntoReg(ByteRegister::B, ByteRegister::A),
            0xA9 => Self::XorRegIntoReg(ByteRegister::C, ByteRegister::A),
            0xAA => Self::XorRegIntoReg(ByteRegister::D, ByteRegister::A),
            0xAB => Self::XorRegIntoReg(ByteRegister::E, ByteRegister::A),
            0xAC => Self::XorRegIntoReg(ByteRegister::H, ByteRegister::A),
            0xAD => Self::XorRegIntoReg(ByteRegister::L, ByteRegister::A),
            0xAE => Self::XorAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::A),
            0xAF => Self::XorRegIntoReg(ByteRegister::A, ByteRegister::A),
            // Row B
            // Or
            0xB0 => Self::OrRegIntoReg(ByteRegister::B, ByteRegister::A),
            0xB1 => Self::OrRegIntoReg(ByteRegister::C, ByteRegister::A),
            0xB2 => Self::OrRegIntoReg(ByteRegister::D, ByteRegister::A),
            0xB3 => Self::OrRegIntoReg(ByteRegister::E, ByteRegister::A),
            0xB4 => Self::OrRegIntoReg(ByteRegister::H, ByteRegister::A),
            0xB5 => Self::OrRegIntoReg(ByteRegister::L, ByteRegister::A),
            0xB6 => Self::OrAtAddressInWordRegIntoReg(WordRegister::HL, ByteRegister::A),
            0xB7 => Self::OrRegIntoReg(ByteRegister::A, ByteRegister::A),
            // Compare
            0xB8 => Self::CompareRegAndReg(ByteRegister::B, ByteRegister::A),
            0xB9 => Self::CompareRegAndReg(ByteRegister::C, ByteRegister::A),
            0xBA => Self::CompareRegAndReg(ByteRegister::D, ByteRegister::A),
            0xBB => Self::CompareRegAndReg(ByteRegister::E, ByteRegister::A),
            0xBC => Self::CompareRegAndReg(ByteRegister::H, ByteRegister::A),
            0xBD => Self::CompareRegAndReg(ByteRegister::L, ByteRegister::A),
            0xBE => Self::CompareAtAddressInWordRegAndReg(WordRegister::HL, ByteRegister::A),
            0xBF => Self::CompareRegAndReg(ByteRegister::A, ByteRegister::A),
            // Row C
            0xC0 => Self::NegativeConditionalReturn(CpuFlag::Zero),
            0xC1 => Self::PopStackIntoWordReg(WordRegister::BC),
            0xC2 => Self::NegativeConditionalJumpImmediateAddress(CpuFlag::Zero),
            0xC3 => Self::JumpImmediateAddress,
            0xC4 => Self::NegativeConditionalCallImmediateAddress(CpuFlag::Zero),
            0xC5 => Self::PushWordRegIntoStack(WordRegister::BC),
            0xC6 => Self::AddImmediateIntoReg(ByteRegister::A),
            0xC7 => Self::CallFixedAddress(0x00),
            0xC8 => Self::ConditionalReturn(CpuFlag::Zero),
            0xC9 => Self::Return,
            0xCA => Self::ConditionalJumpImmediateAddress(CpuFlag::Zero),
            0xCB => Self::Prefixed,
            0xCC => Self::ConditionalCallImmediateAddress(CpuFlag::Zero),
            0xCD => Self::CallImmediateAddress,
            0xCE => Self::AddImmediateIntoRegWithCarry(ByteRegister::A),
            0xCF => Self::CallFixedAddress(0x08),
            // Row D
            0xD0 => Self::NegativeConditionalReturn(CpuFlag::Carry),
            0xD1 => Self::PopStackIntoWordReg(WordRegister::DE),
            0xD2 => Self::NegativeConditionalJumpImmediateAddress(CpuFlag::Carry),
            0xD3 => Self::Noop, // fake noop
            0xD4 => Self::NegativeConditionalCallImmediateAddress(CpuFlag::Carry),
            0xD5 => Self::PushWordRegIntoStack(WordRegister::DE),
            0xD6 => Self::SubImmediateFromReg(ByteRegister::A),
            0xD7 => Self::CallFixedAddress(0x10),
            0xD8 => Self::ConditionalReturn(CpuFlag::Carry),
            0xD9 => Self::ReturnAndEnableInterrupts,
            0xDA => Self::ConditionalJumpImmediateAddress(CpuFlag::Carry),
            0xDB => Self::Noop, // fake noop
            0xDC => Self::ConditionalCallImmediateAddress(CpuFlag::Carry),
            0xDD => Self::Noop, // fake noop
            0xDE => Self::SubImmediateFromRegWithCarry(ByteRegister::A),
            0xDF => Self::CallFixedAddress(0x18),
            // Row E
            0xE0 => Self::LoadRegIntoImmediateIORegister(ByteRegister::A),
            0xE1 => Self::PopStackIntoWordReg(WordRegister::HL),
            0xE2 => Self::LoadRegIntoRegIORegister(ByteRegister::A, ByteRegister::C),
            0xE3 => Self::Noop, // fake noop
            0xE4 => Self::Noop, // fake noop
            0xE5 => Self::PushWordRegIntoStack(WordRegister::HL),
            0xE6 => Self::AndImmediateIntoReg(ByteRegister::A),
            0xE7 => Self::CallFixedAddress(0x20),
            0xE8 => Self::AddSignedImmediateIntoWordReg(WordRegister::SP),
            0xE9 => Self::JumpToAddressInWordReg(WordRegister::HL),
            0xEA => Self::LoadRegIntoImmediateAddress(ByteRegister::A),
            0xEB => Self::Noop, // fake noop
            0xEC => Self::Noop, // fake noop
            0xED => Self::Noop, // fake noop
            0xEE => Self::XorImmediateIntoReg(ByteRegister::A),
            0xEF => Self::CallFixedAddress(0x28),
            // Row F
            0xF0 => Self::LoadImmediateIORegisterIntoReg(ByteRegister::A),
            0xF1 => Self::PopStackIntoWordReg(WordRegister::AF),
            0xF2 => Self::LoadRegIORegisterIntoReg(ByteRegister::C, ByteRegister::A),
            0xF3 => Self::DisableInterrupts,
            0xF4 => Self::Noop, // fake noop
            0xF5 => Self::PushWordRegIntoStack(WordRegister::AF),
            0xF6 => Self::OrImmediateIntoReg(ByteRegister::A),
            0xF7 => Self::CallFixedAddress(0x30),
            0xF8 => Self::LoadSumOfWordRegAndSignedImmediateIntoWordReg(
                WordRegister::SP,
                WordRegister::HL,
            ),
            0xF9 => Self::LoadWordRegIntoWordReg(WordRegister::HL, WordRegister::SP),
            0xFA => Self::LoadAtImmediateAddressIntoReg(ByteRegister::A),
            0xFB => Self::EnableInterrupts,
            0xFC => Self::Noop, // fake noop
            0xFD => Self::Noop, // fake noop
            0xFE => Self::CompareImmediateAndReg(ByteRegister::A),
            0xFF => Self::CallFixedAddress(0x38),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum PrefixedOperation {
    RotateRegLeft(ByteRegister),
    RotateAtAddressInWordRegLeft(WordRegister),
    RotateRegRight(ByteRegister),
    RotateAtAddressInWordRegRight(WordRegister),
    RotateRegLeftThroughCarry(ByteRegister),
    RotateAtAddressInWordRegLeftThroughCarry(WordRegister),
    RotateRegRightThroughCarry(ByteRegister),
    RotateAtAddressInWordRegRightThroughCarry(WordRegister),
    ShiftRegLeftArithmetically(ByteRegister),
    ShiftAtAddressInWordRegLeftArithmetically(WordRegister),
    ShiftRegRightArithmetically(ByteRegister),
    ShiftAtAddressInWordRegRightArithmetically(WordRegister),
    SwapRegNibbles(ByteRegister),
    SwapAtAddressInWordRegNibbles(WordRegister),
    ShiftRegRightLogically(ByteRegister),
    ShiftAtAddressInWordRegRightLogically(WordRegister),
    TestForBitInReg(u8, ByteRegister),
    TestForBitInAtAddressInWordReg(u8, WordRegister),
    ClearBitInReg(u8, ByteRegister),
    ClearBitInAtAddressInWordReg(u8, WordRegister),
    SetBitInReg(u8, ByteRegister),
    SetBitInAtAddressInWordReg(u8, WordRegister),
}

impl From<u8> for PrefixedOperation {
    fn from(value: u8) -> Self {
        match value & 0x0F {
            0x06 => match value & 0xF0 {
                0x00 => Self::RotateAtAddressInWordRegLeft(WordRegister::HL),
                0x10 => Self::RotateAtAddressInWordRegLeftThroughCarry(WordRegister::HL),
                0x20 => Self::ShiftAtAddressInWordRegLeftArithmetically(WordRegister::HL),
                0x30 => Self::SwapAtAddressInWordRegNibbles(WordRegister::HL),
                0x40 => Self::TestForBitInAtAddressInWordReg(0, WordRegister::HL),
                0x50 => Self::TestForBitInAtAddressInWordReg(2, WordRegister::HL),
                0x60 => Self::TestForBitInAtAddressInWordReg(4, WordRegister::HL),
                0x70 => Self::TestForBitInAtAddressInWordReg(6, WordRegister::HL),
                0x80 => Self::ClearBitInAtAddressInWordReg(0, WordRegister::HL),
                0x90 => Self::ClearBitInAtAddressInWordReg(2, WordRegister::HL),
                0xA0 => Self::ClearBitInAtAddressInWordReg(4, WordRegister::HL),
                0xB0 => Self::ClearBitInAtAddressInWordReg(6, WordRegister::HL),
                0xC0 => Self::SetBitInAtAddressInWordReg(0, WordRegister::HL),
                0xD0 => Self::SetBitInAtAddressInWordReg(2, WordRegister::HL),
                0xE0 => Self::SetBitInAtAddressInWordReg(4, WordRegister::HL),
                0xF0 => Self::SetBitInAtAddressInWordReg(6, WordRegister::HL),
                _ => unsafe { unreachable_unchecked() },
            },
            0x0E => match value & 0xF0 {
                0x00 => Self::RotateAtAddressInWordRegRight(WordRegister::HL),
                0x10 => Self::RotateAtAddressInWordRegRightThroughCarry(WordRegister::HL),
                0x20 => Self::ShiftAtAddressInWordRegRightArithmetically(WordRegister::HL),
                0x30 => Self::ShiftAtAddressInWordRegRightLogically(WordRegister::HL),
                0x40 => Self::TestForBitInAtAddressInWordReg(1, WordRegister::HL),
                0x50 => Self::TestForBitInAtAddressInWordReg(3, WordRegister::HL),
                0x60 => Self::TestForBitInAtAddressInWordReg(5, WordRegister::HL),
                0x70 => Self::TestForBitInAtAddressInWordReg(7, WordRegister::HL),
                0x80 => Self::ClearBitInAtAddressInWordReg(1, WordRegister::HL),
                0x90 => Self::ClearBitInAtAddressInWordReg(3, WordRegister::HL),
                0xA0 => Self::ClearBitInAtAddressInWordReg(5, WordRegister::HL),
                0xB0 => Self::ClearBitInAtAddressInWordReg(7, WordRegister::HL),
                0xC0 => Self::SetBitInAtAddressInWordReg(1, WordRegister::HL),
                0xD0 => Self::SetBitInAtAddressInWordReg(3, WordRegister::HL),
                0xE0 => Self::SetBitInAtAddressInWordReg(5, WordRegister::HL),
                0xF0 => Self::SetBitInAtAddressInWordReg(7, WordRegister::HL),
                _ => unsafe { unreachable_unchecked() },
            },
            low_nibble => {
                let reg = match low_nibble {
                    0x00 | 0x08 => ByteRegister::B,
                    0x01 | 0x09 => ByteRegister::C,
                    0x02 | 0x0A => ByteRegister::D,
                    0x03 | 0x0B => ByteRegister::E,
                    0x04 | 0x0C => ByteRegister::H,
                    0x05 | 0x0D => ByteRegister::L,
                    0x07 | 0x0F => ByteRegister::A,
                    _ => unreachable!(),
                };

                match low_nibble {
                    0x00..=0x07 => match value & 0xF0 {
                        0x00 => Self::RotateRegLeft(reg),
                        0x10 => Self::RotateRegLeftThroughCarry(reg),
                        0x20 => Self::ShiftRegLeftArithmetically(reg),
                        0x30 => Self::SwapRegNibbles(reg),
                        0x40 => Self::TestForBitInReg(0, reg),
                        0x50 => Self::TestForBitInReg(2, reg),
                        0x60 => Self::TestForBitInReg(4, reg),
                        0x70 => Self::TestForBitInReg(6, reg),
                        0x80 => Self::ClearBitInReg(0, reg),
                        0x90 => Self::ClearBitInReg(2, reg),
                        0xA0 => Self::ClearBitInReg(4, reg),
                        0xB0 => Self::ClearBitInReg(6, reg),
                        0xC0 => Self::SetBitInReg(0, reg),
                        0xD0 => Self::SetBitInReg(2, reg),
                        0xE0 => Self::SetBitInReg(4, reg),
                        0xF0 => Self::SetBitInReg(6, reg),
                        _ => unsafe { unreachable_unchecked() },
                    },
                    0x08..=0x0F => match value & 0xF0 {
                        0x00 => Self::RotateRegRight(reg),
                        0x10 => Self::RotateRegRightThroughCarry(reg),
                        0x20 => Self::ShiftRegRightArithmetically(reg),
                        0x30 => Self::ShiftRegRightLogically(reg),
                        0x40 => Self::TestForBitInReg(1, reg),
                        0x50 => Self::TestForBitInReg(3, reg),
                        0x60 => Self::TestForBitInReg(5, reg),
                        0x70 => Self::TestForBitInReg(7, reg),
                        0x80 => Self::ClearBitInReg(1, reg),
                        0x90 => Self::ClearBitInReg(3, reg),
                        0xA0 => Self::ClearBitInReg(5, reg),
                        0xB0 => Self::ClearBitInReg(7, reg),
                        0xC0 => Self::SetBitInReg(1, reg),
                        0xD0 => Self::SetBitInReg(3, reg),
                        0xE0 => Self::SetBitInReg(5, reg),
                        0xF0 => Self::SetBitInReg(7, reg),
                        _ => unsafe { unreachable_unchecked() },
                    },
                    _ => unsafe { unreachable_unchecked() },
                }
            }
        }
    }
}
